# **Documenta√ß√£o do Projeto: Treinamento de Desafios Beecrowd**

## 1. Vis√£o Geral e Objetivos

O prop√≥sito deste projeto √© servir como um reposit√≥rio centralizado e guia de estudos para a resolu√ß√£o de desafios da plataforma **Beecrowd** (antigo URI Online Judge). O foco √© construir um portf√≥lio de solu√ß√µes bem documentadas e, ao mesmo tempo, treinar habilidades em diferentes linguagens de programa√ß√£o, come√ßando com **SQL** e expandindo futuramente para **Java** e **Python**.

Este material se destina a estudantes e desenvolvedores que buscam aprimorar sua l√≥gica de programa√ß√£o, se preparar para competi√ß√µes, processos seletivos e aprofundar seus conhecimentos em linguagens espec√≠ficas atrav√©s de desafios pr√°ticos.

**Objetivos de Aprendizagem:**

Ao final deste treinamento, o participante ser√° capaz de:
* Compreender a estrutura de entrada e sa√≠da de dados exigida pelo Beecrowd.
* Dominar a sintaxe e os comandos fundamentais de SQL para consultas e manipula√ß√£o de dados.
* Implementar solu√ß√µes em Java e Python, aplicando as melhores pr√°ticas de cada linguagem.
* Desenvolver o racioc√≠nio l√≥gico e a capacidade de interpretar problemas complexos.
* Estruturar c√≥digo de forma limpa e eficiente para passar nos testes automatizados da plataforma.

## 2. Estrutura e Conte√∫do do Treinamento (Especifica√ß√µes Funcionais)

Nesta se√ß√£o, adaptamos o conceito de "Especifica√ß√µes Funcionais" para descrever o conte√∫do do treinamento. Os "Requisitos Funcionais" s√£o os pr√≥prios desafios da plataforma Beecrowd, identificados por seus respectivos c√≥digos.

O treinamento est√° organizado por linguagens e, dentro de cada uma, por categorias ou n√≠veis de dificuldade.

### 2.1. M√≥dulos de Aprendizagem

O projeto √© dividido nos seguintes m√≥dulos:
1.  **SQL:** Foco em desafios de banco de dados, abordando desde consultas simples at√© jun√ß√µes e agrega√ß√µes complexas.
2.  **Python (Futuro):** Desafios de l√≥gica, manipula√ß√£o de strings, estruturas de dados, etc.
3.  **Java (Futuro):** Desafios com foco em orienta√ß√£o a objetos, performance e estruturas de dados robustas.

### 2.2. Requisitos Funcionais (Desafios Propostos)

A seguir, um exemplo de como os desafios (requisitos) para cada m√≥dulo ser√£o documentados, utilizando o ID do problema no Beecrowd.

---
**M√≥dulo 1: SQL**

* **RF-SQL-2602:** **Representantes Executivos.** O programa deve retornar o nome de todos os clientes cujo estado seja 'RS'.
* **RF-SQL-2605:** **Categorias.** O programa deve retornar o nome dos produtos e de suas respectivas categorias.
* **RF-SQL-2606:** **Endere√ßos dos Clientes.** O programa deve retornar o nome e o endere√ßo dos clientes que moram na cidade de 'Porto Alegre'.
* **RF-SQL-2609:** **Produtos por Categorias.** O programa deve exibir o nome da categoria e o n√∫mero de produtos em cada uma.

---
**M√≥dulo 2: Python (Exemplos Futuros)**

* **RF-PY-1001:** **Extremamente B√°sico.** O programa deve ler dois valores inteiros e apresentar a soma entre eles.
* **RF-PY-1010:** **C√°lculo Simples.** O programa deve ler o c√≥digo, o n√∫mero e o valor unit√°rio de duas pe√ßas, calculando e mostrando o valor a ser pago.

---

### 2.3. Regras de Neg√≥cio (Restri√ß√µes dos Desafios)

No contexto do Beecrowd, as "Regras de Neg√≥cio" s√£o as premissas e, principalmente, as restri√ß√µes de formato de sa√≠da que a plataforma imp√µe para que uma solu√ß√£o seja aceita.

| Cen√°rio do Desafio | Regra/Restri√ß√£o da Plataforma |
| :--- | :--- |
| Qualquer consulta SQL | "O nome das colunas no resultado (`SELECT ... AS nome_coluna`) deve ser **exatamente** igual ao especificado no problema." |
| Sa√≠da de texto (Python/Java) | "A sa√≠da deve terminar com uma quebra de linha (`\n`), caso contr√°rio, pode ocorrer 'Presentation Error'." |
| Jun√ß√£o de Tabelas (SQL) | "Utilizar `LEFT JOIN` ao inv√©s de `INNER JOIN` para garantir que todos os registros da tabela √† esquerda sejam inclu√≠dos, se o problema assim exigir." |
| Formata√ß√£o de N√∫meros | "Valores de ponto flutuante devem ser formatados com o n√∫mero exato de casas decimais solicitado pelo problema." |

## 3. Arquitetura do Projeto

A estrutura de pastas foi organizada para suportar m√∫ltiplas linguagens, facilitando a navega√ß√£o e a adi√ß√£o de novas solu√ß√µes.

**Diagrama da Estrutura de Pastas:**

/Projeto_Treinamento_Beecrowd
‚îÇ
‚îú‚îÄ‚îÄ üìÅ SQL/
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ 2602_Representantes_Executivos.sql
‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îÇ
‚îú‚îÄ‚îÄ üìÅ Java/
‚îÇ   ‚îî‚îÄ‚îÄ (Futuramente ser√£o adicionados desafios em Java)
‚îÇ
‚îú‚îÄ‚îÄ üìÅ Python/
‚îÇ   ‚îî‚îÄ‚îÄ (Futuramente ser√£o adicionados desafios em Python)
‚îÇ
‚îú‚îÄ‚îÄ üìÑ .gitignore
‚îî‚îÄ‚îÄ üìÑ README.md


## 4. Tecnologias e Ferramentas

* **Plataforma de Desafios:** [Beecrowd](https://www.beecrowd.com.br/)
* **Linguagens:**
    * Java (JDK 11+)
    * Python (3.x)
    * SQL (Dialeto PostgreSQL)
* **Ferramentas:**
    * DBeaver / pgAdmin para SQL.
    * IDE de prefer√™ncia para as demais linguagens (VS Code, IntelliJ, etc.).

## 5. Guia de Uso e Aprendizagem

Recomenda-se que o aprendiz escolha um desafio na plataforma e tente resolv√™-lo antes de consultar a solu√ß√£o proposta no reposit√≥rio.

**Fluxo de Estudo Sugerido para cada Desafio:**
1.  **Leia o Problema no Beecrowd:** Entenda completamente o que √© pedido, quais s√£o as entradas, as sa√≠das esperadas e as restri√ß√µes.
2.  **Tente Implementar:** Crie seu pr√≥prio arquivo e desenvolva sua solu√ß√£o. Utilize seu ambiente local para testar.
3.  **Submeta na Plataforma:** Submeta sua solu√ß√£o no Beecrowd e verifique o resultado (Accepted, Wrong Answer, etc.).
4.  **Consulte a Solu√ß√£o Proposta:** Caso tenha dificuldades ou queira comparar abordagens, abra o arquivo correspondente no reposit√≥rio para analisar a solu√ß√£o de gabarito.
5.  **Refatore e Entenda:** Compare as duas solu√ß√µes. Entenda por que a solu√ß√£o do gabarito funciona e tente aplicar os conceitos aprendidos em outros desafios.
